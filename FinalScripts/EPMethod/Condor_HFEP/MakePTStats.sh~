#!/bin/sh
 

b=$(sed -ne "${1}{p;q;}" files.txt)

cat > HFV1PTStats_${1}.C << +EOF
#include<TH1F>
#include<TProfile>
#include<iostream>
#include<iomanip>
#include"TFile.h"
#include"TTree.h"
#include"TLeaf.h"
#include"TChain.h"

void Initialize();
void PTStats();
void AngularCorrections();
void EPPlotting();

//Files and chains
TChain* chain;//= new TChain("CaloTowerTree");
TChain* chain2;//= new TChain("hiGoodTightMergedTracksTree");



//When I parrallelize this, I need to make sure that I do not fill <pT> and <pT*pT>
//Also, this only works because I do not need have any overlapping centrality classes. When I calculate_trodd+=cos(phi)*(pT-(pt2avmid[c]/ptavmid[c])) this would be a problem if i had overlapping classes

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
////////////           GLOBAL VARIABLES            //////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
Float_t pi=TMath::Pi();
Int_t vterm=1;//Set which order harmonic that this code is meant to measure
Int_t jMax=10;////Set out to which order correction we would like to apply
Int_t NumberOfEvents=0;
//NumberOfEvents=1;
//NumberOfEvents=2;
//NumberOfEvents=10;
//NumberOfEvents=10000;
Int_t Centrality=0;
//  NumberOfEvents = chain->GetEntries();

///Looping Variables
Int_t NumberOfHits=0;//This will be for both tracks and Hits
Float_t pT=0.;
Float_t phi=0.;
Float_t eta=0.;
Float_t Energy=0.;


//Create the output ROOT file
TFile *myFile;

const Int_t nCent=5;//Number of Centrality classes

Float_t centlo[nCent];
Float_t centhi[nCent];
centlo[0]=0;  centhi[0]=10;
centlo[1]=10;  centhi[1]=20;
centlo[2]=20;  centhi[2]=30;
centlo[3]=30;  centhi[3]=40;
centlo[4]=40;  centhi[4]=50;


//Make Subdirectories for what will follow
TDirectory *myPlots;//the top level

TDirectory *epangles;//where i will store the ep angles
TDirectory *wholehfepangles;
TDirectory *poshfepangles;
TDirectory *neghfepangles;
TDirectory *midtrackerangles;
////////////////////////////////////////////////
//Angular Correction Folders
TDirectory *angularcorrectionplots;
//Psi1 Odd Corrections
TDirectory *angcorr1odd;
TDirectory *hfoddcorrs;
TDirectory *hfpoddcorrs;
TDirectory *hfnoddcorrs;
TDirectory *midtrackeroddcorrs;
/////////////////////////////////
//Psi1 Even Corrections
TDirectory *angcorr1even;
TDirectory *hfevencorrs;
TDirectory *hfpevencorrs;
TDirectory *hfnevencorrs;
TDirectory *midtrackerevencorrs;
/////////////////////////////////
//Resolutions
TDirectory *resolutions;
TDirectory *evenresolutions;
TDirectory *oddresolutions;
/////////////////////////////////
//V1
TDirectory *v1plots;//where i will store the v1 plots
TDirectory *v1etaoddplots;//v1(eta) [odd] plots
TDirectory *v1etaevenplots; //v1(eta)[even] plots
TDirectory *v1ptevenplots; //v1(pT)[even] plots
TDirectory *v1ptoddplots;//v1(pT)[odd] plots
////////////////////////////////
// pT stat plots
TDirectory *ptstatplots;



//Looping Variables
//v1 even
Float_t X_hfeven=0.,Y_hfeven=0.;


//v1 odd
Float_t X_hfodd=0.,Y_hfodd=0.;

///Looping Variables
//v1 even
Float_t EPhfeven=0.;
Float_t AngularCorrectionHFEven=0.,EPfinalhfeven=0.;

//v1 odd
Float_t EPhfodd=0.;
Float_t AngularCorrectionHFOdd=0.,EPfinalhfodd=0.;

//PosHFEven
Float_t X_poseven=0.,Y_poseven=0.;
Float_t EP_poseven=0.,EP_finalposeven=0.;
Float_t AngularCorrectionHFPEven=0.;
//PosHFOdd
Float_t X_posodd=0.,Y_posodd=0.;
Float_t EP_posodd=0.,EP_finalposodd=0.;
Float_t AngularCorrectionHFPOdd=0.;
//NegHFEven
Float_t X_negeven=0.,Y_negeven=0.;
Float_t EP_negeven=0.,EP_finalnegeven=0.;
Float_t AngularCorrectionHFNEven=0.;
//NegHFOdd
Float_t X_negodd=0.,Y_negodd=0.;
Float_t EP_negodd=0.,EP_finalnegodd=0.;
Float_t AngularCorrectionHFNOdd=0.;

//MidTrackerOdd
Float_t X_trodd=0.,Y_trodd=0.;
Float_t EP_trodd=0.,EP_finaltrodd=0.;
Float_t AngularCorrectionTROdd=0.;
//MidTrackerEven                                                                                  
Float_t X_treven=0.,Y_treven=0.;
Float_t EP_treven=0.,EP_finaltreven=0.;
Float_t AngularCorrectionTREven=0.;



//<pT> and <pT^2> 
Float_t ptavmid[nCent],pt2avmid[nCent];
//for (Int_t z=0;z<nCent;z++)
// {
//   ptavmid[z]=0.;
//   pt2avmid[z]=0.;
// }
////////////////////////////////////////////////////
//These Will store the angular correction factors
//v1 even
TProfile *Coshfeven[nCent];
TProfile *Sinhfeven[nCent];
//PosHF
TProfile *Coshfpeven[nCent];
TProfile *Sinhfpeven[nCent];
//NegHF
TProfile *Coshfneven[nCent];
TProfile *Sinhfneven[nCent];
//Mid Tracker
TProfile *Costreven[nCent];
TProfile *Sintreven[nCent];

//v1 odd
TProfile *Coshfodd[nCent];
TProfile *Sinhfodd[nCent];
//PosHF
TProfile *Coshfpodd[nCent];
TProfile *Sinhfpodd[nCent];
//NegHF
TProfile *Coshfnodd[nCent];
TProfile *Sinhfnodd[nCent];
//Mid Tracker
TProfile *Costrodd[nCent];
TProfile *Sintrodd[nCent];

//////////////////////////////////////////////////////

////////////////////////////////////////////
//Final EP Plots
//Psi1Even
//Whole HF
TH1F *PsiEvenRaw[nCent];
TH1F *PsiEvenFinal[nCent];
//PosHF
TH1F *PsiPEvenRaw[nCent];
TH1F *PsiPEvenFinal[nCent];
//NegHF
TH1F *PsiNEvenRaw[nCent];
TH1F *PsiNEvenFinal[nCent];
//Mid Tracker
TH1F *PsiTREvenRaw[nCent];
TH1F *PsiTREvenFinal[nCent];
//////////////////////////////////////////////
//Psi1 Odd
//Whole HF
TH1F *PsiOddRaw[nCent];
TH1F *PsiOddFinal[nCent];
//PosHF
TH1F *PsiPOddRaw[nCent];
TH1F *PsiPOddFinal[nCent];
//NegHF
TH1F *PsiNOddRaw[nCent];
TH1F *PsiNOddFinal[nCent];
//Mid Tracker               
TH1F *PsiTROddRaw[nCent];
TH1F *PsiTROddFinal[nCent];
///////////////////////////////////////////////

//Average Corrections
TProfile *PsiOddCorrs[nCent];
TProfile *PsiEvenCorrs[nCent];


////////////////////////////////
//Resolution Plots
//Even
TProfile *HFPMinusHFMEven;
TProfile *HFPMinusTREven;
TProfile *HFMMinusTREven;
//Odd
TProfile *HFPMinusHFMOdd;
TProfile *HFPMinusTROdd;
TProfile *HFMMinusTROdd;
/////////////////////////////////

//V1 Plots
//V1 Plots
TProfile *V1EtaOdd[nCent];
TProfile *V1EtaEven[nCent];
TProfile *V1PtEven[nCent];
TProfile *V1PtOdd[nCent];

//PT Bin Centers
TProfile *PTCenters[nCent];
//////////////////////////////////
//////////////
/// pT Stat Plots
TProfile *PtStatsMid[nCent];//Middle eta tracker

Int_t HFV1PTStats_${1}(){
  Initialize();
  PTStats();
  return 0;
}


void Initialize(){

  //  std::cout<<"Made it into initialize"<<std::endl;
  Float_t eta_bin_small[13]={-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0.0,0.1,0.2,0.3,0.4,0.5,0.6};

  Double_t pt_bin[17]={0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0,2.4,2.8,3.2,3.6,4.5,6.5,9.5,12};


  chain= new TChain("hiGoodTightMergedTracksTree");
  chain2=new TChain("CaloTowerTree");
  //Tracks Tree
  //  chain2->Add("/home/jgomez2/Desktop/Forward*");
  // chain->Add("/home/jgomez2/Desktop/Forward*");

  //Calo Tower Tree
  chain->Add("/hadoop/store/user/jgomez2/ForwardTrees/2010/PanicTime/$b");
  //Tracks Tree
  chain2->Add("/hadoop/store/user/jgomez2/ForwardTrees/2010/PanicTime/$b");

  NumberOfEvents = chain2->GetEntries();
  //Create the output ROOT file
  myFile = new TFile("HFEP_PTStats_${1}.root","recreate");

  //Make Subdirectories for what will follow
  myPlots = myFile->mkdir("Plots");
  myPlots->cd();
  //////////////////////////////////////////////////////////////////////
  ptstatplots = myPlots->mkdir("PTStats");
  //////////////////////////////////////////
  //Directory for the EP angles
  epangles = myPlots->mkdir("EventPlanes");
  wholehfepangles = epangles->mkdir("CombinedHF");
  poshfepangles = epangles->mkdir("PositiveHF");
  neghfepangles= epangles->mkdir("NegativeHF");
  midtrackerangles = epangles->mkdir("TrackerEP");
  ///////////////////////////////////////////////////////////////////
  //Angular Correction Folders
  angularcorrectionplots = myPlots->mkdir("AngularCorrectionPlots");
  //Psi1 Corrections
  //Psi1 Even Corrections
  angcorr1even = angularcorrectionplots->mkdir("FirstOrderEPEvenCorrs");
  hfevencorrs = angcorr1even->mkdir("WholeHF");
  hfpevencorrs = angcorr1even->mkdir("PositiveHF");
  hfnevencorrs = angcorr1even->mkdir("NegativeHF");
  midtrackerevencorrs = angcorr1even->mkdir("Tracker");
  ///////////////////////////////////////////////////////////////////////////
  //Psi1 Corrections
  angcorr1odd = angularcorrectionplots->mkdir("FirstOrderEPOddCorrs");
  hfoddcorrs = angcorr1odd->mkdir("WholeHF");
  hfpoddcorrs = angcorr1odd->mkdir("PositiveHF");
  hfnoddcorrs = angcorr1odd->mkdir("NegativeHF");
  midtrackeroddcorrs = angcorr1odd->mkdir("Tracker");
  /////////////////////////////////////////////////////////////////////////
  //EP Resolutions
  resolutions = myPlots->mkdir("Resolutions");
  //Even
  evenresolutions = resolutions->mkdir("EvenResolutions");
  evenresolutions->cd();
  HFPMinusHFMEven = new TProfile("HFPMinusHFMEven","Resolution of HF^{+} and HF^{-}",nCent,0,nCent);
  HFPMinusHFMEven->GetYaxis()->SetTitle("<cos(#Psi_{1}^{HF^{+}} - #Psi_{1}^{HF^{-}})>");
  HFPMinusTREven = new TProfile("HFPMinusTREven","Resolution of HF^{+} and the Tracker",nCent,0,nCent);
  HFPMinusTREven->GetYaxis()->SetTitle("<cos(#Psi_{1}^{HF^{+}} - #Psi_{1}^{TR})>");
  HFMMinusTREven = new TProfile("HFMMinusTREven","Resolution of HF^{-} and the Tracker",nCent,0,nCent);
  HFMMinusTREven->GetYaxis()->SetTitle("<cos(#Psi_{1}^{HF^{-}} - #Psi_{1}^{TR})>");
  //Odd
  oddresolutions = resolutions->mkdir("OddResolutions");
  oddresolutions->cd();
  HFPMinusHFMOdd = new TProfile("HFPMinusHFMOdd","Resolution of HF^{+} and HF^{-}",nCent,0,nCent);
  HFPMinusHFMOdd->GetYaxis()->SetTitle("<cos(#Psi_{1}^{HF^{+}} - #Psi_{1}^{HF^{-}})>");
  HFPMinusTROdd = new TProfile("HFPMinusTROdd","Resolution of HF^{+} and the Tracker",nCent,0,nCent);
  HFPMinusTROdd->GetYaxis()->SetTitle("<cos(#Psi_{1}^{HF^{+}} - #Psi_{1}^{TR})>");
  HFMMinusTROdd = new TProfile("HFMMinusTROdd","Resolution of HF^{-} and the Tracker",nCent,0,nCent);
  HFMMinusTROdd->GetYaxis()->SetTitle("<cos(#Psi_{1}^{HF^{-}} - #Psi_{1}^{TR})>");
  ////////////////////////////////////////////////////////////////
  //Directory For Final v1 plots
  v1plots = myPlots->mkdir("V1Results");
  v1etaoddplots = v1plots->mkdir("V1EtaOdd");
  v1etaevenplots = v1plots->mkdir("V1EtaEven");
  v1ptevenplots = v1plots->mkdir("V1pTEven");
  v1ptoddplots = v1plots->mkdir("V1pTOdd");




  //<Cos>,<Sin> Psi1(even)
  //Whole HF
  char coshfevenname[128],coshfeventitle[128];
  char sinhfevenname[128],sinhfeventitle[128];
  //Pos HF
  char coshfpevenname[128],coshfpeventitle[128];
  char sinhfpevenname[128],sinhfpeventitle[128];
  //Neg HF
  char coshfnevenname[128],coshfneventitle[128];
  char sinhfnevenname[128],sinhfneventitle[128];
  //Tracker
  char costrevenname[128],costreventitle[128];
  char sintrevenname[128],sintreventitle[128];
  /////////////////////////////////////////////////
  //<Cos>,<Sin> Psi1(odd)
  char coshfoddname[128],coshfoddtitle[128];
  char sinhfoddname[128],sinhfoddtitle[128];
  //Pos HF
  char coshfpoddname[128],coshfpoddtitle[128];
  char sinhfpoddname[128],sinhfpoddtitle[128];
  //Neg HF
  char coshfnoddname[128],coshfnoddtitle[128];
  char sinhfnoddname[128],sinhfnoddtitle[128];
  //Tracker
  char costroddname[128],costroddtitle[128];
  char sintroddname[128],sintroddtitle[128];
  ////////////////////////////////////////////////////////////
  //Psi1 Raw, Psi1 Final
  //Psi1(even)
  //Whole HF
  char epevenrawname[128],epevenrawtitle[128];
  char epevenfinalname[128],epevenfinaltitle[128];
  //Pos HF
  char poshfevenrawname[128],poshfevenrawtitle[128];
  char poshfevenfinalname[128],poshfevenfinaltitle[128];
  //Neg HF
  char neghfevenrawname[128],neghfevenrawtitle[128];
  char neghfevenfinalname[128],neghfevenfinaltitle[128];
  //Tracker
  char trevenrawname[128],trevenrawtitle[128];
  char trevenfinalname[128],trevenfinaltitle[128];
  //////////////////////////////////////////////////////////////
  //Psi1(odd)
  //Whole HF
  char epoddrawname[128],epoddrawtitle[128];
  char epoddfinalname[128],epoddfinaltitle[128];
  //Pos HF
  char poshfoddrawname[128],poshfoddrawtitle[128];
  char poshfoddfinalname[128],poshfoddfinaltitle[128];
  //Neg HF
  char neghfoddrawname[128],neghfoddrawtitle[128];
  char neghfoddfinalname[128],neghfoddfinaltitle[128];
  //Tracker                                       
  char troddrawname[128],troddrawtitle[128];
  char troddfinalname[128],troddfinaltitle[128];
  //////////////////////////////////////////////////////////////

  //Visualization of Correction Factors
  //Psi1(even)
  char psi1evencorrsname[128],psi1evencorrstitle[128];
  //Psi1(odd)
  char psi1oddcorrsname[128],psi1oddcorrstitle[128];
  /////////////////////////////////////////////////////////////
  //
  //V1 Plots
  //v1(even)
  char v1etaevenname[128],v1etaeventitle[128];
  char v1ptevenname[128],v1pteventitle[128];
  //v1(odd)
  char v1etaoddname[128],v1etaoddtitle[128];
  char v1ptoddname[128],v1ptoddtitle[128];

  //PT Centers
  char ptcentername[128],ptcentertitle[128];

  ///////////////////////////////////
  ////PT Stats
  char ptstatname[128],ptstattitle[128];

  for (Int_t i=0;i<nCent;i++)
    {
      ///////////////////////////////
      ////////<cos>,<sin> plots//////
      ///////////////////////////////

      //v1 even
      //Whole HF
      hfevencorrs->cd();
      sprintf(coshfevenname,"CosValues_HFEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(coshfeventitle,"CosValues_HFEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Coshfeven[i]= new TProfile(coshfevenname,coshfeventitle,jMax,0,jMax);
      Coshfeven[i]->GetYaxis()->SetTitle("<cos(Xbin*#Psi)>");

      sprintf(sinhfevenname,"SinValues_HFEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(sinhfeventitle,"SinValues_HFEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Sinhfeven[i]= new TProfile(sinhfevenname,sinhfeventitle,jMax,0,jMax);
      Sinhfeven[i]->GetYaxis()->SetTitle("<sin(Xbin*#Psi)>");

      //Pos HF
      hfpevencorrs->cd();
      sprintf(coshfpevenname,"CosValues_HFPEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(coshfpeventitle,"CosValues_HFPEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Coshfpeven[i]= new TProfile(coshfpevenname,coshfpeventitle,jMax,0,jMax);
      Coshfpeven[i]->GetYaxis()->SetTitle("<cos(Xbin*#Psi)>");

      sprintf(sinhfpevenname,"SinValues_HFPEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(sinhfpeventitle,"SinValues_HFPEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Sinhfpeven[i]= new TProfile(sinhfpevenname,sinhfpeventitle,jMax,0,jMax);
      Sinhfpeven[i]->GetYaxis()->SetTitle("<sin(Xbin*#Psi)>");

      //Neg HF
      hfnevencorrs->cd();
      sprintf(coshfnevenname,"CosValues_HFNEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(coshfneventitle,"CosValues_HFNEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Coshfneven[i]= new TProfile(coshfnevenname,coshfneventitle,jMax,0,jMax);
      Coshfneven[i]->GetYaxis()->SetTitle("<cos(Xbin*#Psi)>");

      sprintf(sinhfnevenname,"SinValues_HFNEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(sinhfneventitle,"SinValues_HFNEven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Sinhfneven[i]= new TProfile(sinhfnevenname,sinhfneventitle,jMax,0,jMax);
      Sinhfneven[i]->GetYaxis()->SetTitle("<sin(Xbin*#Psi)>");

      //Tracker                                                
      midtrackerevencorrs->cd();
      sprintf(costrevenname,"CosValues_TREven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(costreventitle,"CosValues_TREven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Costreven[i]= new TProfile(costrevenname,costreventitle,jMax,0,jMax);
      Costreven[i]->GetYaxis()->SetTitle("<cos(Xbin*#Psi)>");

      sprintf(sintrevenname,"SinValues_TREven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(sintreventitle,"SinValues_TREven_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Sintreven[i]= new TProfile(sintrevenname,sintreventitle,jMax,0,jMax);
      Sintreven[i]->GetYaxis()->SetTitle("<sin(Xbin*#Psi)>");

      ////////////////////////////////////////////////////////////////////////////////////////////////
      //Psi1 Odd
      hfoddcorrs->cd();
      sprintf(coshfoddname,"CosValues_HFOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(coshfoddtitle,"CosValues_HFOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Coshfodd[i]= new TProfile(coshfoddname,coshfoddtitle,jMax,0,jMax);
      Coshfodd[i]->GetYaxis()->SetTitle("<cos(Xbin*#Psi)>");

      sprintf(sinhfoddname,"SinValues_HFOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(sinhfoddtitle,"SinValues_HFOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Sinhfodd[i]= new TProfile(sinhfoddname,sinhfoddtitle,jMax,0,jMax);
      Sinhfodd[i]->GetYaxis()->SetTitle("<sin(Xbin*#Psi)>");

      //Pos HF
      hfpoddcorrs->cd();
      sprintf(coshfpoddname,"CosValues_HFPOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(coshfpoddtitle,"CosValues_HFPOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Coshfpodd[i]= new TProfile(coshfpoddname,coshfpoddtitle,jMax,0,jMax);
      Coshfpodd[i]->GetYaxis()->SetTitle("<cos(Xbin*#Psi)>");

      sprintf(sinhfpoddname,"SinValues_HFPOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(sinhfpoddtitle,"SinValues_HFPOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Sinhfpodd[i]= new TProfile(sinhfpoddname,sinhfpoddtitle,jMax,0,jMax);
      Sinhfpodd[i]->GetYaxis()->SetTitle("<sin(Xbin*#Psi)>");

      //Neg HF
      hfnoddcorrs->cd();
      sprintf(coshfnoddname,"CosValues_HFNOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(coshfnoddtitle,"CosValues_HFNOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Coshfnodd[i]= new TProfile(coshfnoddname,coshfnoddtitle,jMax,0,jMax);
      Coshfnodd[i]->GetYaxis()->SetTitle("<cos(Xbin*#Psi)>");

      sprintf(sinhfnoddname,"SinValues_HFNOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(sinhfnoddtitle,"SinValues_HFNOdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Sinhfnodd[i]= new TProfile(sinhfnoddname,sinhfnoddtitle,jMax,0,jMax);
      Sinhfnodd[i]->GetYaxis()->SetTitle("<sin(Xbin*#Psi)>");

      //Tracker
      midtrackeroddcorrs->cd();
      sprintf(costroddname,"CosValues_TROdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(costroddtitle,"CosValues_TROdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Costrodd[i]= new TProfile(costroddname,costroddtitle,jMax,0,jMax);
      Costrodd[i]->GetYaxis()->SetTitle("<cos(Xbin*#Psi)>");

      sprintf(sintroddname,"SinValues_TROdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(sintroddtitle,"SinValues_TROdd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      Sintrodd[i]= new TProfile(sintroddname,sintroddtitle,jMax,0,jMax);
      Sintrodd[i]->GetYaxis()->SetTitle("<sin(Xbin*#Psi)>");

      ///////////////////////////////////////////////////////////////////////////////////////////
      //Event Plane Plots
      wholehfepangles->cd();
      //Psi1Even
      //Whole HF
      //Raw
      sprintf(epevenrawname,"Psi1EvenRaw_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(epevenrawtitle,"#Psi_{1}^{even} Raw %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiEvenRaw[i] = new TH1F(epevenrawname,epevenrawtitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiEvenRaw[i]->GetXaxis()->SetTitle("EP Angle (radians)");
      //Final
      sprintf(epevenfinalname,"Psi1EvenFinal_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(epevenfinaltitle,"#Psi_{1}^{even} Final %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiEvenFinal[i] = new TH1F(epevenfinalname,epevenfinaltitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiEvenFinal[i]->GetXaxis()->SetTitle("EP Angle (radians)");

      //Pos HF
      poshfepangles->cd();
      //Raw
      sprintf(poshfevenrawname,"Psi1PEvenRaw_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(poshfevenrawtitle,"#Psi_{1}^{even}(HF^{+}) Raw %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiPEvenRaw[i] = new TH1F(poshfevenrawname,poshfevenrawtitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiPEvenRaw[i]->GetXaxis()->SetTitle("EP Angle (radians)");
      //Final
      sprintf(poshfevenfinalname,"Psi1PEvenFinal_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(poshfevenfinaltitle,"#Psi_{1}^{even}(HF^{+}) Final %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiPEvenFinal[i] = new TH1F(poshfevenfinalname,poshfevenfinaltitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiPEvenFinal[i]->GetXaxis()->SetTitle("EP Angle (radians)");


      //Neg HF
      neghfepangles->cd();
      //Raw
      sprintf(neghfevenrawname,"Psi1NEvenRaw_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(neghfevenrawtitle,"#Psi_{1}^{even}(HF^{-}) Raw %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiNEvenRaw[i] = new TH1F(neghfevenrawname,neghfevenrawtitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiNEvenRaw[i]->GetXaxis()->SetTitle("EP Angle (radians)");
      //Final
      sprintf(neghfevenfinalname,"Psi1NEvenFinal_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(neghfevenfinaltitle,"#Psi_{1}^{even}(HF^{-}) Final %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiNEvenFinal[i] = new TH1F(neghfevenfinalname,neghfevenfinaltitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiNEvenFinal[i]->GetXaxis()->SetTitle("EP Angle (radians)");

      //Tracker                                                     
      midtrackerangles->cd();
      //Raw
      sprintf(trevenrawname,"Psi1TREvenRaw_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(trevenrawtitle,"#Psi_{1}^{even}(TR) Raw %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiTREvenRaw[i] = new TH1F(trevenrawname,trevenrawtitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiTREvenRaw[i]->GetXaxis()->SetTitle("EP Angle (radians)");
      //Final
      sprintf(trevenfinalname,"Psi1TREvenFinal_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(trevenfinaltitle,"#Psi_{1}^{even}(TR) Final %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiTREvenFinal[i] = new TH1F(trevenfinalname,trevenfinaltitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiTREvenFinal[i]->GetXaxis()->SetTitle("EP Angle (radians)");
      

      ///////////////////////////////////////////////////////////////////////////////////

      //Psi1Odd
      wholehfepangles->cd();
      //Whole HF
      //Raw
      sprintf(epoddrawname,"Psi1OddRaw_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(epoddrawtitle,"#Psi_{1}^{odd} Raw %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiOddRaw[i] = new TH1F(epoddrawname,epoddrawtitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiOddRaw[i]->GetXaxis()->SetTitle("EP Angle (radians)");
      //Final
      sprintf(epoddfinalname,"Psi1OddFinal_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(epoddfinaltitle,"#Psi_{1}^{odd} Final %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiOddFinal[i] = new TH1F(epoddfinalname,epoddfinaltitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiOddFinal[i]->GetXaxis()->SetTitle("EP Angle (radians)");

      //Pos HF
      poshfepangles->cd();
      //Raw
      sprintf(poshfoddrawname,"Psi1POddRaw_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(poshfoddrawtitle,"#Psi_{1}^{odd}(HF^{+}) Raw %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiPOddRaw[i] = new TH1F(poshfoddrawname,poshfoddrawtitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiPOddRaw[i]->GetXaxis()->SetTitle("EP Angle (radians)");
      //Final
      sprintf(poshfoddfinalname,"Psi1POddFinal_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(poshfoddfinaltitle,"#Psi_{1}^{odd}(HF^{+}) Final %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiPOddFinal[i] = new TH1F(poshfoddfinalname,poshfoddfinaltitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiPOddFinal[i]->GetXaxis()->SetTitle("EP Angle (radians)");


      //Neg HF
      neghfepangles->cd();
      //Raw
      sprintf(neghfoddrawname,"Psi1NOddRaw_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(neghfoddrawtitle,"#Psi_{1}^{odd}(HF^{-}) Raw %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiNOddRaw[i] = new TH1F(neghfoddrawname,neghfoddrawtitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiNOddRaw[i]->GetXaxis()->SetTitle("EP Angle (radians)");
      //Final
      sprintf(neghfoddfinalname,"Psi1NOddFinal_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(neghfoddfinaltitle,"#Psi_{1}^{odd}(HF^{-}) Final %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiNOddFinal[i] = new TH1F(neghfoddfinalname,neghfoddfinaltitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiNOddFinal[i]->GetXaxis()->SetTitle("EP Angle (radians)");

      //Tracker                                                     
      midtrackerangles->cd();
      //Raw 
      sprintf(troddrawname,"Psi1TROddRaw_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(troddrawtitle,"#Psi_{1}^{odd}(TR) Raw %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiTROddRaw[i] = new TH1F(troddrawname,troddrawtitle,100,-TMath::Pi()-.392699,TMath::Pi()+.39269);
      PsiTROddRaw[i]->GetXaxis()->SetTitle("EP Angle (radians)");
      //Final 
      sprintf(troddfinalname,"Psi1TROddFinal_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(troddfinaltitle,"#Psi_{1}^{odd}(TR) Final %1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiTROddFinal[i] = new TH1F(troddfinalname,troddfinaltitle,100,-TMath::Pi()-.392699,TMath::Pi()+.392699);
      PsiTROddFinal[i]->GetXaxis()->SetTitle("EP Angle (radians)");


      ////////////////////////////////////////////////////////////////////////////
      //Magnitude of Angular Correction Plots
      //Psi1 Even
      angcorr1even->cd();
      sprintf(psi1evencorrsname,"PsiEvenCorrs_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(psi1evencorrstitle,"PsiEvenCorrs_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiEvenCorrs[i]= new TProfile(psi1evencorrsname,psi1evencorrstitle,jMax,0,jMax);

      //Psi1 Odd
      angcorr1odd->cd();
      sprintf(psi1oddcorrsname,"PsiOddCorrs_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(psi1oddcorrstitle,"PsiOddCorrs_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      PsiOddCorrs[i]= new TProfile(psi1oddcorrsname,psi1oddcorrstitle,jMax,0,jMax);

      /////////////////////////////////////////////////
      //////V1 Plots
      //V1 Eta

      //Even
      v1etaevenplots->cd();
      sprintf(v1etaevenname,"V1Eta_Even_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(v1etaeventitle,"v_{1}^{even}(#eta) %1.0lfto%1.0lf",centlo[i],centhi[i]);
      V1EtaEven[i]= new TProfile(v1etaevenname,v1etaeventitle,12,eta_bin_small);
      
      //Odd
      v1etaoddplots->cd();
      sprintf(v1etaoddname,"V1Eta_Odd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(v1etaoddtitle,"v_{1}^{odd}(#eta) %1.0lfto%1.0lf",centlo[i],centhi[i]);
      V1EtaOdd[i]= new TProfile(v1etaoddname,v1etaoddtitle,12,eta_bin_small);

      //V1 Pt

      //Even
      v1ptevenplots->cd();
      sprintf(v1ptevenname,"V1Pt_Even_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(v1pteventitle,"v_{1}^{even}(p_{T}) %1.0lfto%1.0lf",centlo[i],centhi[i]);
      V1PtEven[i]= new TProfile(v1ptevenname,v1pteventitle,16,pt_bin);
      //Odd
      v1ptoddplots->cd();
      sprintf(v1ptoddname,"V1Pt_Odd_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(v1ptoddtitle,"v_{1}^{odd}(p_{T}) %1.0lfto%1.0lf",centlo[i],centhi[i]);
      V1PtOdd[i]= new TProfile(v1ptoddname,v1ptoddtitle,16,pt_bin);

      //pT Centers
      v1plots->cd();
      sprintf(ptcentername,"PTCenter_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(ptcentertitle,"PTCenter_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      PTCenters[i] = new TProfile(ptcentername,ptcentertitle,16,pt_bin);

      //////////////////////////////////////////////////////
      //////// PT STAT PLots
      //Mid tracker
      ptstatplots->cd();
      sprintf(ptstatname,"PtStatsMid_%1.0lfto%1.0lf",centlo[i],centhi[i]);
      sprintf(ptstattitle,"p_{T} stats for mid-rapidity tracker %1.0lf-%1.0lf %%",centlo[i],centhi[i]);
      PtStatsMid[i]= new TProfile(ptstatname,ptstattitle,2,0,2);
      PtStatsMid[i]->GetXaxis()->SetBinLabel(1,"<p_{T}>");
      PtStatsMid[i]->GetXaxis()->SetBinLabel(2,"<p_{T}^{2}>");

    }//end of loop over centralities

}//end of initialize function


void PTStats(){
  for (Int_t i=0;i<NumberOfEvents;i++)
    {
      if ( !(i%10000) ) cout << " 1st round, event # " << i << " / " << NumberOfEvents << endl;
      chain->GetEntry(i);
      
      CENTRAL= (TLeaf*) chain->GetLeaf("bin");
      Centrality= CENTRAL->GetValue();
      if (Centrality>19) continue;

      //Grab the Track Leaves
      NumTracks= (TLeaf*) chain->GetLeaf("nTracks");
      TrackMom= (TLeaf*) chain->GetLeaf("pt");
      TrackPhi= (TLeaf*) chain->GetLeaf("phi");
      TrackEta= (TLeaf*) chain->GetLeaf("eta");

      //Loop over all of the Reconstructed Tracks
      NumberOfHits= NumTracks->GetValue();
      for (int ii=0;ii<NumberOfHits;ii++)
        {
          pT=0.;
          phi=0.;
          eta=0.;
          pT=TrackMom->GetValue(ii);
          phi=TrackPhi->GetValue(ii);
          eta=TrackEta->GetValue(ii);
          if(pT<0)
            {
              continue;
            }
	  for (Int_t c=0;c<nCent;c++)
            {
	      if ( (Centrality*2.5) > centhi[c] ) continue;
              if ( (Centrality*2.5) < centlo[c] ) continue;
	      PtStatsMid[c]->Fill(0,pT);
	      PtStatsMid[c]->Fill(1,pT*pT);
	    }//end of loop over centralityies
	}//end of loop over tracks
    }//end of loop over events

  for (Int_t cent_iter=0;cent_iter<nCent;cent_iter++)
    {
      ptavmid[cent_iter]=PtStatsMid[cent_iter]->GetBinContent(1);
      pt2avmid[cent_iter]=PtStatsMid[cent_iter]->GetBinContent(2);      
    }//end of loop over centralities
  myFile->Write();
}//end of ptstats function

+EOF

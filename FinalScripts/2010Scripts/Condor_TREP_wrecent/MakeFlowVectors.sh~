#!/bin/sh
 

b=$(sed -ne "${1}{p;q;}" files.txt)

cat > TRV1FlowVectors_${1}.C << +EOF

#include<TH1F>
#include<TProfile>
#include<iostream>
#include<iomanip>
#include"TFile.h"
#include"TTree.h"
#include"TLeaf.h"
#include"TChain.h"
//Functions in this macro///
void Initialize();
void FillPTStats();
void FlowVectors();
////////////////////////////


//Files and chains
TChain* chain2;

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
////////////           GLOBAL VARIABLES            //////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
Float_t pi=TMath::Pi();
Int_t vterm=1;//Set which order harmonic that this code is meant to measure
Int_t jMax=10;////Set out to which order correction we would like to apply
Int_t NumberOfEvents=0;
//NumberOfEvents=1;
//NumberOfEvents=2;
//NumberOfEvents=10;
//NumberOfEvents=100;
//NumberOfEvents=50000;
//NumberOfEvents=100000;
//NumberOfEvents=5000000;
//  NumberOfEvents = chain->GetEntries();

const Int_t nCent=5;//Number of Centrality classes

///Looping Variables
Int_t Centrality=0; //This will be the centrality variable later
Int_t NumberOfHits=0;//This will be for both tracks and Hits
Float_t pT=0.;
Float_t phi=0.;
Float_t eta=0.;


Float_t centlo[nCent];
Float_t centhi[nCent];
centlo[0]=0;  centhi[0]=10;
centlo[1]=10;  centhi[1]=20;
centlo[2]=20;  centhi[2]=30;
centlo[3]=30;  centhi[3]=40;
centlo[4]=40;  centhi[4]=50;

//Create the output ROOT file
TFile *myFile;// = new TFile("TREP_PTStats_${1}.root","RECREATE");
//TTree *myTree;
//Make Subdirectories for what will follow
TDirectory *myPlots;//the top level

TDirectory *flowvectors;
TDirectory *evenvectors;
TDirectroy *oddvectors;


//TProfiles to save <pT> and <pT^2> info ....All this is for Ollitrault weights
Float_t ptavwhole[nCent]={0.},pt2avwhole[nCent]={0.};
Float_t ptavpos[nCent]={0.},pt2avpos[nCent]={0.};
Float_t ptavneg[nCent]={0.},pt2avneg[nCent]={0.};
Float_t ptavmid[nCent]={0.},pt2avmid[nCent]={0.};


//Looping Variables
//v1 even
Float_t X_wholetracker[nCent]={0.},Y_wholetracker[nCent]={0.},
  X_postracker[nCent]={0.},Y_postracker[nCent]={0.},
  X_negtracker[nCent]={0.},Y_negtracker[nCent]={0.},
  X_midtracker[nCent]={0.},Y_midtracker[nCent]={0.};

//v1 odd
Float_t X_wholeoddtracker[nCent]={0.},Y_wholeoddtracker[nCent]={0.},
  X_posoddtracker[nCent]={0.},Y_posoddtracker[nCent]={0.},
  X_negoddtracker[nCent]={0.},Y_negoddtracker[nCent]={0.},
  X_midoddtracker[nCent]={0.},Y_midoddtracker[nCent]={0.};


///Plots to calculate the <x> and sigma(x), same for Y

//v1 even
TProfile2D *FlowVectorsWholeTracker;
TProfile2D *FlowVectorsPosTracker;
TProfile2D *FlowVectorsNegTracker;
TProfile2D *FlowVectorsMidTracker;

//v1 odd
TProfile2D *FlowVectorsWholeOddTracker;
TProfile2D *FlowVectorsPosOddTracker;
TProfile2D *FlowVectorsNegOddTracker;
TProfile2D *FlowVectorsMidOddTracker;
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
/////////////////// END OF GLOBAL VARIABLES ///////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////

//Running the Macro
Int_t TRV1FlowVectors_${1}(){//put functions in here
  Initialize();
  FillPTStats();
  FlowVectors();
  myFile->Write();
  return 0;
}

void Initialize(){

 

  chain2= new TChain("hiGoodTightMergedTracksTree");

  //Tracks Tree
  chain2->Add("/hadoop/store/user/jgomez2/ForwardTrees/2010/PanicTime/$b");
  
   NumberOfEvents= chain2->GetEntries();
  //Create the output ROOT file
  myFile = new TFile("TREP_FlowVectors_${1}.root","recreate");

  //Make Subdirectories for what will follow
  myPlots = myFile->mkdir("Plots");
  myPlots->cd();

  flowvectors=myPlots->mkdir("FlowVectorInformation");
  evenvectors=flowvectors->mkdir("EvenFlowVectors");
  oddvectors=flowvectors->mkdir("OddFlowVectors");
  

     //Make The even vector plots first
     evenvectors->cd();
     //Whole Tracker
     FlowVectorsWholeTracker = new TProfile2D("FlowVectorsEvenWholeTracker","FlowVectorInformationWholeTracker",nCent,0,nCent,2,0,2,"s(j)");
     FlowVectorsWholeTracker->GetXaxis()->SetBinLabel(1,"0-10%");
     FlowVectorsWholeTracker->GetXaxis()->SetBinLabel(2,"10-20%");
     FlowVectorsWholeTracker->GetXaxis()->SetBinLabel(3,"20-30%");
     FlowVectorsWholeTracker->GetXaxis()->SetBinLabel(4,"30-40%");
     FlowVectorsWholeTracker->GetXaxis()->SetBinLabel(5,"40-50%");
     FlowVectorsWholeTracker->GetYaxis()->SetBinLabel(1,"X");
     FlowVectorsWholeTracker->GetYaxis()->SetBinLabel(2,"Y");

     //Pos Tracker
     FlowVectorsPosTracker = new TProfile2D("FlowVectorsEvenPosTracker","FlowVectorInformationPosTracker",nCent,0,nCent,2,0,2,"s(j)");
     FlowVectorsPosTracker->GetXaxis()->SetBinLabel(1,"0-10%");
     FlowVectorsPosTracker->GetXaxis()->SetBinLabel(2,"10-20%");
     FlowVectorsPosTracker->GetXaxis()->SetBinLabel(3,"20-30%");
     FlowVectorsPosTracker->GetXaxis()->SetBinLabel(4,"30-40%");
     FlowVectorsPosTracker->GetXaxis()->SetBinLabel(5,"40-50%");
     FlowVectorsPosTracker->GetYaxis()->SetBinLabel(1,"X");
     FlowVectorsPosTracker->GetYaxis()->SetBinLabel(2,"Y");

     //Neg Tracker
     FlowVectorsNegTracker = new TProfile2D("FlowVectorsEvenNegTracker","FlowVectorInformationNegTracker",nCent,0,nCent,2,0,2,"s(j)");
     FlowVectorsNegTracker->GetXaxis()->SetBinLabel(1,"0-10%");
     FlowVectorsNegTracker->GetXaxis()->SetBinLabel(2,"10-20%");
     FlowVectorsNegTracker->GetXaxis()->SetBinLabel(3,"20-30%");
     FlowVectorsNegTracker->GetXaxis()->SetBinLabel(4,"30-40%");
     FlowVectorsNegTracker->GetXaxis()->SetBinLabel(5,"40-50%");
     FlowVectorsNegTracker->GetYaxis()->SetBinLabel(1,"X");
     FlowVectorsNegTracker->GetYaxis()->SetBinLabel(2,"Y");

     //Mid Tracker
     FlowVectorsMidTracker = new TProfile2D("FlowVectorsEvenMidTracker","FlowVectorInformationMidTracker",nCent,0,nCent,2,0,2,"s(j)");
     FlowVectorsMidTracker->GetXaxis()->SetBinLabel(1,"0-10%");
     FlowVectorsMidTracker->GetXaxis()->SetBinLabel(2,"10-20%");
     FlowVectorsMidTracker->GetXaxis()->SetBinLabel(3,"20-30%");
     FlowVectorsMidTracker->GetXaxis()->SetBinLabel(4,"30-40%");
     FlowVectorsMidTracker->GetXaxis()->SetBinLabel(5,"40-50%");
     FlowVectorsMidTracker->GetYaxis()->SetBinLabel(1,"X");
     FlowVectorsMidTracker->GetYaxis()->SetBinLabel(2,"Y");

     //Make The odd vector plots next
     oddvectors->cd();
     //Whole Tracker
     FlowVectorsWholeOddTracker = new TProfile2D("FlowVectorsOddWholeTracker","FlowVectorInformationWholeOddTracker",nCent,0,nCent,2,0,2,"s(j)");
     FlowVectorsWholeOddTracker->GetXaxis()->SetBinLabel(1,"0-10%");
     FlowVectorsWholeOddTracker->GetXaxis()->SetBinLabel(2,"10-20%");
     FlowVectorsWholeOddTracker->GetXaxis()->SetBinLabel(3,"20-30%");
     FlowVectorsWholeOddTracker->GetXaxis()->SetBinLabel(4,"30-40%");
     FlowVectorsWholeOddTracker->GetXaxis()->SetBinLabel(5,"40-50%");
     FlowVectorsWholeOddTracker->GetYaxis()->SetBinLabel(1,"X");
     FlowVectorsWholeOddTracker->GetYaxis()->SetBinLabel(2,"Y");

     //Pos Tracker
     FlowVectorsPosOddTracker = new TProfile2D("FlowVectorsEvenPosOddTracker","FlowVectorInformationPosOddTracker",nCent,0,nCent,2,0,2,"s(j)");
     FlowVectorsPosOddTracker->GetXaxis()->SetBinLabel(1,"0-10%");
     FlowVectorsPosOddTracker->GetXaxis()->SetBinLabel(2,"10-20%");
     FlowVectorsPosOddTracker->GetXaxis()->SetBinLabel(3,"20-30%");
     FlowVectorsPosOddTracker->GetXaxis()->SetBinLabel(4,"30-40%");
     FlowVectorsPosOddTracker->GetXaxis()->SetBinLabel(5,"40-50%");
     FlowVectorsPosOddTracker->GetYaxis()->SetBinLabel(1,"X");
     FlowVectorsPosOddTracker->GetYaxis()->SetBinLabel(2,"Y");

     //Neg OddTracker
     FlowVectorsNegOddTracker = new TProfile2D("FlowVectorsEvenNegOddTracker","FlowVectorInformationNegOddTracker",nCent,0,nCent,2,0,2,"s(j)");
     FlowVectorsNegOddTracker->GetXaxis()->SetBinLabel(1,"0-10%");
     FlowVectorsNegOddTracker->GetXaxis()->SetBinLabel(2,"10-20%");
     FlowVectorsNegOddTracker->GetXaxis()->SetBinLabel(3,"20-30%");
     FlowVectorsNegOddTracker->GetXaxis()->SetBinLabel(4,"30-40%");
     FlowVectorsNegOddTracker->GetXaxis()->SetBinLabel(5,"40-50%");
     FlowVectorsNegOddTracker->GetYaxis()->SetBinLabel(1,"X");
     FlowVectorsNegOddTracker->GetYaxis()->SetBinLabel(2,"Y");

     //Mid OddTracker
     FlowVectorsMidOddTracker = new TProfile2D("FlowVectorsEvenMidOddTracker","FlowVectorInformationMidOddTracker",nCent,0,nCent,2,0,2,"s(j)");
     FlowVectorsMidOddTracker->GetXaxis()->SetBinLabel(1,"0-10%");
     FlowVectorsMidOddTracker->GetXaxis()->SetBinLabel(2,"10-20%");
     FlowVectorsMidOddTracker->GetXaxis()->SetBinLabel(3,"20-30%");
     FlowVectorsMidOddTracker->GetXaxis()->SetBinLabel(4,"30-40%");
     FlowVectorsMidOddTracker->GetXaxis()->SetBinLabel(5,"40-50%");
     FlowVectorsMidOddTracker->GetYaxis()->SetBinLabel(1,"X");
     FlowVectorsMidOddTracker->GetYaxis()->SetBinLabel(2,"Y");

}//end of initialize function


void FlowVectors(){

 for (Int_t i=0;i<NumberOfEvents;i++)
    {
      if ( !(i%10000) ) cout << " 2nd round, event # " << i << " / " << NumberOfEvents << endl;
     
           chain2->GetEntry(i);//grab the ith event

      //Grab the Track Leaves
      NumTracks= (TLeaf*) chain2->GetLeaf("nTracks");
      TrackMom= (TLeaf*) chain2->GetLeaf("pt");
      TrackPhi= (TLeaf*) chain2->GetLeaf("phi");
      TrackEta= (TLeaf*) chain2->GetLeaf("eta");

      //Grab the Centrality Leaves
      CENTRAL= (TLeaf*) chain2->GetLeaf("bin");
      Centrality= CENTRAL->GetValue();
      if (Centrality>19) continue; //we dont care about any centrality greater than 60%

      //Zero the Looping Variables
      for (int q=0;q<nCent;q++)
        {
          //v1 Even
          X_wholetracker[q]=0.;
          Y_wholetracker[q]=0.;
          X_postracker[q]=0.;
          Y_postracker[q]=0.;
          X_negtracker[q]=0.;
          Y_negtracker[q]=0.;
          X_midtracker[q]=0.;
          Y_midtracker[q]=0.;

          //v1 Odd
          X_wholeoddtracker[q]=0.;
          Y_wholeoddtracker[q]=0.;
          X_posoddtracker[q]=0.;
          Y_posoddtracker[q]=0.;
          X_negoddtracker[q]=0.;
          Y_negoddtracker[q]=0.;
          X_midoddtracker[q]=0.;
          Y_midoddtracker[q]=0.;
        }

      NumberOfHits= NumTracks->GetValue();
      for (Int_t ii=0;ii<NumberOfHits;ii++)
        {
          pT=0.;
          phi=0.;
          eta=0.;
          pT=TrackMom->GetValue(ii);
          phi=TrackPhi->GetValue(ii);
          eta=TrackEta->GetValue(ii);
          if(pT<0)
            {
              continue;
            }
          for (Int_t c=0;c<nCent;c++)
            {
              if ( (Centrality*2.5) > centhi[c] ) continue;
              if ( (Centrality*2.5) < centlo[c] ) continue;
              if(eta>=1.4)
                {
                  X_wholetracker[c]+=cos(phi)*(pT-(pt2avwhole[c]/ptavwhole[c]));
                  Y_wholetracker[c]+=sin(phi)*(pT-(pt2avwhole[c]/ptavwhole[c]));
                  X_postracker[c]+=cos(phi)*(pT-(pt2avpos[c]/ptavpos[c]));
                  Y_postracker[c]+=sin(phi)*(pT-(pt2avpos[c]/ptavpos[c]));
                  //v1 odd
                  X_wholeoddtracker[c]+=cos(phi)*(pT-(pt2avwhole[c]/ptavwhole[c]));
                  Y_wholeoddtracker[c]+=sin(phi)*(pT-(pt2avwhole[c]/ptavwhole[c]));
                  X_posoddtracker[c]+=cos(phi)*(pT-(pt2avpos[c]/ptavpos[c]));
                  Y_posoddtracker[c]+=sin(phi)*(pT-(pt2avpos[c]/ptavpos[c]));
                }
              else if(eta<=-1.4)
                {
                  X_wholetracker[c]+=cos(phi)*(pT-(pt2avwhole[c]/ptavwhole[c]));
                  Y_wholetracker[c]+=sin(phi)*(pT-(pt2avwhole[c]/ptavwhole[c]));
                  X_negtracker[c]+=cos(phi)*(pT-(pt2avneg[c]/ptavneg[c]));
                  Y_negtracker[c]+=sin(phi)*(pT-(pt2avneg[c]/ptavneg[c]));
                  //v1 odd
                  X_wholeoddtracker[c]+=cos(phi)*(-1.0*(pT-(pt2avwhole[c]/ptavwhole[c])));
                  Y_wholeoddtracker[c]+=sin(phi)*(-1.0*(pT-(pt2avwhole[c]/ptavwhole[c])));
                  X_negoddtracker[c]+=cos(phi)*(-1.0*(pT-(pt2avneg[c]/ptavneg[c])));
                  Y_negoddtracker[c]+=sin(phi)*(-1.0*(pT-(pt2avneg[c]/ptavneg[c])));
                }
              else if(eta<=0.6 && eta>0)
                {
                  X_midtracker[c]+=cos(phi)*(pT-(pt2avmid[c]/ptavmid[c]));
                  Y_midtracker[c]+=sin(phi)*(pT-(pt2avmid[c]/ptavmid[c]));
                  //v1 odd
                  X_midoddtracker[c]+=cos(phi)*(pT-(pt2avmid[c]/ptavmid[c]));
                  Y_midoddtracker[c]+=sin(phi)*(pT-(pt2avmid[c]/ptavmid[c]));
                }
              else if(eta>=-0.6 && eta<0)
                {
                  X_midtracker[c]+=cos(phi)*(pT-(pt2avmid[c]/ptavmid[c]));
                  Y_midtracker[c]+=sin(phi)*(pT-(pt2avmid[c]/ptavmid[c]));
                  //v1 odd
                  X_midoddtracker[c]+=cos(phi)*(-1.0*(pT-(pt2avmid[c]/ptavmid[c])));
                  Y_midoddtracker[c]+=sin(phi)*(-1.0*(pT-(pt2avmid[c]/ptavmid[c])));
                }
            }//end of loop over centrality classes
        }//end of loop over tracks

          for (Int_t c=0;c<nCent;c++)
            {
              if ( (Centrality*2.5) > centhi[c] ) continue;
              if ( (Centrality*2.5) < centlo[c] ) continue;

              //v1 even
              FlowVectorsWholeTracker->Fill(c+0.2,0.2,X_wholetracker[c]);
              FlowVectorsWholeTracker->Fill(c+0.2,1.2,Y_wholetracker[c]);

              FlowVectorsPosTracker->Fill(c+0.2,0.2,X_postracker[c]);
              FlowVectorsPosTracker->Fill(c+0.2,1.2,Y_postracker[c]);

              FlowVectorsNegTracker->Fill(c+0.2,0.2,X_negtracker[c]);
              FlowVectorsNegTracker->Fill(c+0.2,1.2,Y_negtracker[c]);

              FlowVectorsMidTracker->Fill(c+0.2,0.2,X_midtracker[c]);
              FlowVectorsMidTracker->Fill(c+0.2,1.2,Y_midtracker[c]);

              //v1 odd
              FlowVectorsWholeOddTracker->Fill(c+0.2,0.2,X_wholoddtracker[c]);
              FlowVectorsWholeOddTracker->Fill(c+0.2,1.2,Y_wholeoddtracker[c]);

              FlowVectorsPosOddTracker->Fill(c+0.2,0.2,X_posoddtracker[c]);
              FlowVectorsPosOddTracker->Fill(c+0.2,1.2,Y_posoddtracker[c]);

              FlowVectorsNegOddTracker->Fill(c+0.2,0.2,X_negoddtracker[c]);
              FlowVectorsNegOddTracker->Fill(c+0.2,1.2,Y_negoddtracker[c]);

              FlowVectorsMidOddTracker->Fill(c+0.2,0.2,X_midoddtracker[c]);
              FlowVectorsMidOddTracker->Fill(c+0.2,1.2,Y_midoddtracker[c]);
          }//end of loop over centralities
    }//end of loop over events
}//End of flowvectors function




void FillPTStats(){
//Whole Tracker
ptavwhole[0]=0.941351;
ptavwhole[1]=0.951032;
ptavwhole[2]=0.95263;
ptavwhole[3]=0.947478;
ptavwhole[4]=0.937569;
 
pt2avwhole[0]=1.19736;
pt2avwhole[1]=1.22518;
pt2avwhole[2]=1.23526;
pt2avwhole[3]=1.23014;
pt2avwhole[4]=1.21337;
 
//Positive Tracker
ptavpos[0]=0.948274;
ptavpos[1]=0.958461;
ptavpos[2]=0.960167;
ptavpos[3]=0.954984;
ptavpos[4]=0.944996;
 
pt2avpos[0]=1.21445;
pt2avpos[1]=1.24371;
pt2avpos[2]=1.25415;
pt2avpos[3]=1.24917;
pt2avpos[4]=1.23214;
 
//Negative Tracker
ptavneg[0]=0.934988;
ptavneg[1]=0.944227;
ptavneg[2]=0.945735;
ptavneg[3]=0.940621;
ptavneg[4]=0.930783;
 
pt2avneg[0]=1.18166;
pt2avneg[1]=1.20821;
pt2avneg[2]=1.21797;
pt2avneg[3]=1.21275;
pt2avneg[4]=1.19621;
 
//Mid Tracker
ptavmid[0]=0.777191;
ptavmid[1]=0.781748;
ptavmid[2]=0.780175;
ptavmid[3]=0.773304;
ptavmid[4]=0.762743;
 
pt2avmid[0]=0.866207;
pt2avmid[1]=0.881687;
pt2avmid[2]=0.883832;
pt2avmid[3]=0.874966;
pt2avmid[4]=0.857524;


}//End of fillptstats function


+EOF
